package com.assessment.hospitalplanning.controller;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.assessment.hospitalplanning.config.JwtUtil;
import com.assessment.hospitalplanning.config.auth.AuthenticationRequest;
import com.assessment.hospitalplanning.config.auth.AuthenticationResponse;
import com.assessment.hospitalplanning.dto.PatientDto;
import com.assessment.hospitalplanning.dto.StaffDTO;
import com.assessment.hospitalplanning.service.MyUserDetailsService;
import com.assessment.hospitalplanning.service.PatientService;
import com.assessment.hospitalplanning.service.StaffService;




@RestController
@RequestMapping("/api")
public class Controller {
   
	@Autowired
    public StaffService staffService;
    @Autowired
    private PatientService patientService;
    @Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private MyUserDetailsService userDetailsService;
	@Autowired
	private JwtUtil jwtTokenUtil;


    //Authenticate Staff
	@PostMapping("/authenticate")
	public ResponseEntity<?> createAuthenticationToken(@RequestBody AuthenticationRequest authenticationRequest)
			throws Exception {
		try {
			System.out.println(authenticationRequest.getUsername());
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
					authenticationRequest.getUsername(), authenticationRequest.getPassword()));
		} catch (BadCredentialsException e) {
			throw new Exception("Incorrect username or password", e);
		}
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		final String jwt = jwtTokenUtil.generateToken(userDetails);
		return ResponseEntity.ok(new AuthenticationResponse(jwt,userDetails.getUsername()));
	}

	//add a new staff member to the service
	//a uuid is autogenerated for every staff
    @PostMapping("/staff")
    public ResponseEntity<?> addnewStaff(@Valid @RequestBody StaffDTO staffDto) {
    	return staffService.staff(staffDto);
 
    }
    
    //update staff member profile
    @PutMapping("/staff")
    public ResponseEntity<?> staffUpdate(@Valid @RequestBody StaffDTO staffDto){
       return staffService.staffUpdate(staffDto);
    }
    
    //fetch all patient profiles (where there age up to 2 years old)
    @GetMapping("/patients")
    public ResponseEntity<?>patientsProfile(Pageable pageable){
    	return patientService.retrievePatients(2, pageable);
    }
    
    //delete multiple patient profiles between a date range
    @DeleteMapping("/patients")
    public ResponseEntity<?> deletePatientProfileBeetweenDateRange(@RequestParam(name = "fromDate") String fromDate,@RequestParam(name = "fromDate") String toDate){
    	return patientService.deletePatientUsingDateRange(fromDate,toDate);
    }
    
    //download a specific patientâ€™s profile into a CSV file
    @RequestMapping(path = "/patient/{patientId}")
    public void downloadPatientProfile(HttpServletResponse servletResponse, @PathVariable Integer patientId) throws Exception {
        servletResponse.setContentType("text/csv");
        servletResponse.addHeader("Content-Disposition","attachment; filename=\"patient.csv\"");
       patientService.downloadPatientProfile(servletResponse.getWriter());
    }
    
    


}